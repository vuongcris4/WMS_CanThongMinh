
stm32lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004758  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004864  08004864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f0  080048f0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f8  080048f8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004900  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000068  08004968  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08004968  00006424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef61  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002104  00000000  00000000  00014ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000170f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1f  00000000  00000000  00018040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018131  00000000  00000000  00018c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c5a  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb83  00000000  00000000  000429ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  000cf5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000d3ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800484c 	.word	0x0800484c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800484c 	.word	0x0800484c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ff77 	bl	8001564 <HAL_Delay>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af02      	add	r7, sp, #8
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	70fb      	strb	r3, [r7, #3]
 800068a:	4613      	mov	r3, r2
 800068c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	f023 030f 	bic.w	r3, r3, #15
 8000694:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7adb      	ldrb	r3, [r3, #11]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d007      	beq.n	80006b4 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80006b4:	78bb      	ldrb	r3, [r7, #2]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d108      	bne.n	80006cc <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	e00a      	b.n	80006e2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ffb9 	bl	8000664 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffaf 	bl	8000664 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	4619      	mov	r1, r3
 8000714:	f107 0208 	add.w	r2, r7, #8
 8000718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2304      	movs	r3, #4
 8000720:	f001 fd38 	bl	8002194 <HAL_I2C_Master_Transmit>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4611      	mov	r1, r2
 8000738:	461a      	mov	r2, r3
 800073a:	460b      	mov	r3, r1
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	4613      	mov	r3, r2
 8000740:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	7e3a      	ldrb	r2, [r7, #24]
 8000758:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2228      	movs	r2, #40	@ 0x28
 800075e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2206      	movs	r2, #6
 8000764:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	220c      	movs	r2, #12
 800076a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2214      	movs	r2, #20
 8000770:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2208      	movs	r2, #8
 8000776:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000778:	2032      	movs	r0, #50	@ 0x32
 800077a:	f7ff ff73 	bl	8000664 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800077e:	2200      	movs	r2, #0
 8000780:	2133      	movs	r1, #51	@ 0x33
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff7b 	bl	800067e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000788:	2200      	movs	r2, #0
 800078a:	2133      	movs	r1, #51	@ 0x33
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f7ff ff76 	bl	800067e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000792:	2005      	movs	r0, #5
 8000794:	f7ff ff66 	bl	8000664 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000798:	2200      	movs	r2, #0
 800079a:	2132      	movs	r1, #50	@ 0x32
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f7ff ff6e 	bl	800067e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80007a2:	2005      	movs	r0, #5
 80007a4:	f7ff ff5e 	bl	8000664 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff66 	bl	800067e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff ff56 	bl	8000664 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	79db      	ldrb	r3, [r3, #7]
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f7ff ff5c 	bl	800067e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	7a1b      	ldrb	r3, [r3, #8]
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f7ff ff55 	bl	800067e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	7a5b      	ldrb	r3, [r3, #9]
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff ff4e 	bl	800067e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	7a9b      	ldrb	r3, [r3, #10]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f7ff ff47 	bl	800067e <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f7ff ff42 	bl	800067e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff ff3d 	bl	800067e <CLCD_WriteI2C>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	78fa      	ldrb	r2, [r7, #3]
 8000826:	429a      	cmp	r2, r3
 8000828:	d303      	bcc.n	8000832 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	3b01      	subs	r3, #1
 8000830:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	78ba      	ldrb	r2, [r7, #2]
 8000838:	429a      	cmp	r2, r3
 800083a:	d303      	bcc.n	8000844 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	799b      	ldrb	r3, [r3, #6]
 8000840:	3b01      	subs	r3, #1
 8000842:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000844:	78bb      	ldrb	r3, [r7, #2]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d102      	bne.n	8000850 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e013      	b.n	8000878 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000850:	78bb      	ldrb	r3, [r7, #2]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d103      	bne.n	800085e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	3340      	adds	r3, #64	@ 0x40
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e00c      	b.n	8000878 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800085e:	78bb      	ldrb	r3, [r7, #2]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d103      	bne.n	800086c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	3314      	adds	r3, #20
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e005      	b.n	8000878 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d102      	bne.n	8000878 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	3354      	adds	r3, #84	@ 0x54
 8000876:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fefa 	bl	800067e <CLCD_WriteI2C>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff feea 	bl	800067e <CLCD_WriteI2C>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80008bc:	e007      	b.n	80008ce <CLCD_I2C_WriteString+0x1c>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	603a      	str	r2, [r7, #0]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ffe2 	bl	8000892 <CLCD_I2C_WriteChar>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f3      	bne.n	80008be <CLCD_I2C_WriteString+0xc>
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fec6 	bl	800067e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80008f2:	2005      	movs	r0, #5
 80008f4:	f7ff feb6 	bl	8000664 <CLCD_Delay>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <microDelay>:




void microDelay(uint16_t delay)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <microDelay+0x2c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000912:	bf00      	nop
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <microDelay+0x2c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3f9      	bcc.n	8000914 <microDelay+0x14>
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	200000d8 	.word	0x200000d8

08000930 <getHX711>:

int32_t getHX711(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800093a:	f000 fe09 	bl	8001550 <HAL_GetTick>
 800093e:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000940:	e008      	b.n	8000954 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8000942:	f000 fe05 	bl	8001550 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2bc8      	cmp	r3, #200	@ 0xc8
 800094e:	d901      	bls.n	8000954 <getHX711+0x24>
      return 0;
 8000950:	2300      	movs	r3, #0
 8000952:	e045      	b.n	80009e0 <getHX711+0xb0>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8000954:	2108      	movs	r1, #8
 8000956:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <getHX711+0xb8>)
 8000958:	f001 faa8 	bl	8001eac <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d0ef      	beq.n	8000942 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8000962:	2300      	movs	r3, #0
 8000964:	72fb      	strb	r3, [r7, #11]
 8000966:	e022      	b.n	80009ae <getHX711+0x7e>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2110      	movs	r1, #16
 800096c:	481e      	ldr	r0, [pc, #120]	@ (80009e8 <getHX711+0xb8>)
 800096e:	f001 fab4 	bl	8001eda <HAL_GPIO_WritePin>
    microDelay(1);
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ffc4 	bl	8000900 <microDelay>
    data = data << 1;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2110      	movs	r1, #16
 8000982:	4819      	ldr	r0, [pc, #100]	@ (80009e8 <getHX711+0xb8>)
 8000984:	f001 faa9 	bl	8001eda <HAL_GPIO_WritePin>
    microDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ffb9 	bl	8000900 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800098e:	2108      	movs	r1, #8
 8000990:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <getHX711+0xb8>)
 8000992:	f001 fa8b 	bl	8001eac <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d102      	bne.n	80009a2 <getHX711+0x72>
      data ++;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80009a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	72fb      	strb	r3, [r7, #11]
 80009ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009b2:	2b17      	cmp	r3, #23
 80009b4:	ddd8      	ble.n	8000968 <getHX711+0x38>
  }
  data = data ^ 0x800000;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80009bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2110      	movs	r1, #16
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <getHX711+0xb8>)
 80009c4:	f001 fa89 	bl	8001eda <HAL_GPIO_WritePin>
  microDelay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff ff99 	bl	8000900 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2110      	movs	r1, #16
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <getHX711+0xb8>)
 80009d4:	f001 fa81 	bl	8001eda <HAL_GPIO_WritePin>
  microDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ff91 	bl	8000900 <microDelay>
  return data;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010c00 	.word	0x40010c00

080009ec <weigh>:

int weigh()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 80009f6:	2332      	movs	r3, #50	@ 0x32
 80009f8:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;
  for(uint16_t i=0 ; i<samples ; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	827b      	strh	r3, [r7, #18]
 80009fe:	e008      	b.n	8000a12 <weigh+0x26>
  {
      total += getHX711();
 8000a00:	f7ff ff96 	bl	8000930 <getHX711>
 8000a04:	4602      	mov	r2, r0
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4413      	add	r3, r2
 8000a0a:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<samples ; i++)
 8000a0c:	8a7b      	ldrh	r3, [r7, #18]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	827b      	strh	r3, [r7, #18]
 8000a12:	8a7b      	ldrh	r3, [r7, #18]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dcf2      	bgt.n	8000a00 <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a22:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <weigh+0x7c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <weigh+0x80>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fd56 	bl	80004e0 <__aeabi_fdiv>
 8000a34:	4603      	mov	r3, r0
 8000a36:	607b      	str	r3, [r7, #4]
  milligram = (int)(average-tare)*coefficient;
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <weigh+0x84>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fc45 	bl	80002d0 <__aeabi_i2f>
 8000a46:	4603      	mov	r3, r0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fc94 	bl	8000378 <__aeabi_fmul>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fde0 	bl	8000618 <__aeabi_f2iz>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	603b      	str	r3, [r7, #0]
  return milligram;
 8000a5c:	683b      	ldr	r3, [r7, #0]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000000 	.word	0x20000000

08000a74 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2 && Size > 0) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a67      	ldr	r2, [pc, #412]	@ (8000c24 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	f040 80c3 	bne.w	8000c12 <HAL_UARTEx_RxEventCallback+0x19e>
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f000 80bf 	beq.w	8000c12 <HAL_UARTEx_RxEventCallback+0x19e>
    if (Size >= sizeof(data_rx)) Size = sizeof(data_rx) - 1;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a98:	d901      	bls.n	8000a9e <HAL_UARTEx_RxEventCallback+0x2a>
 8000a9a:	234f      	movs	r3, #79	@ 0x4f
 8000a9c:	807b      	strh	r3, [r7, #2]

    memset(data_rx, 0, sizeof(data_rx));
 8000a9e:	2250      	movs	r2, #80	@ 0x50
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4861      	ldr	r0, [pc, #388]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000aa4:	f003 fa30 	bl	8003f08 <memset>
    memcpy(data_rx, temp_data, Size);
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	495f      	ldr	r1, [pc, #380]	@ (8000c2c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000aae:	485e      	ldr	r0, [pc, #376]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ab0:	f003 fa72 	bl	8003f98 <memcpy>
    data_rx[Size] = '\0';
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	54d1      	strb	r1, [r2, r3]
    memset(temp_data, 0, sizeof(temp_data));
 8000abc:	2250      	movs	r2, #80	@ 0x50
 8000abe:	2100      	movs	r1, #0
 8000ac0:	485a      	ldr	r0, [pc, #360]	@ (8000c2c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000ac2:	f003 fa21 	bl	8003f08 <memset>

    if(data_rx[0] == "~"){
 8000ac6:	4b58      	ldr	r3, [pc, #352]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b58      	ldr	r3, [pc, #352]	@ (8000c30 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d105      	bne.n	8000ade <HAL_UARTEx_RxEventCallback+0x6a>
    	memset(data_rx, 0, sizeof(data_rx));
 8000ad2:	2250      	movs	r2, #80	@ 0x50
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4854      	ldr	r0, [pc, #336]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ad8:	f003 fa16 	bl	8003f08 <memset>
 8000adc:	e099      	b.n	8000c12 <HAL_UARTEx_RxEventCallback+0x19e>
    }else{
    if (data_rx[0] == '!') {
 8000ade:	4b52      	ldr	r3, [pc, #328]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b21      	cmp	r3, #33	@ 0x21
 8000ae4:	d10b      	bne.n	8000afe <HAL_UARTEx_RxEventCallback+0x8a>
        strncpy(productName, &data_rx[1], 20);
 8000ae6:	2214      	movs	r2, #20
 8000ae8:	4952      	ldr	r1, [pc, #328]	@ (8000c34 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000aea:	4853      	ldr	r0, [pc, #332]	@ (8000c38 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000aec:	f003 fa14 	bl	8003f18 <strncpy>
        productName[20] = '\0';
 8000af0:	4b51      	ldr	r3, [pc, #324]	@ (8000c38 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	751a      	strb	r2, [r3, #20]
        nameReady = 1;
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e089      	b.n	8000c12 <HAL_UARTEx_RxEventCallback+0x19e>
        }
    else {

    // ⚠️ Clear các dòng trước
    memset(line1, 0, sizeof(line1));
 8000afe:	2215      	movs	r2, #21
 8000b00:	2100      	movs	r1, #0
 8000b02:	484f      	ldr	r0, [pc, #316]	@ (8000c40 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000b04:	f003 fa00 	bl	8003f08 <memset>
    memset(line2, 0, sizeof(line2));
 8000b08:	2215      	movs	r2, #21
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	484d      	ldr	r0, [pc, #308]	@ (8000c44 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000b0e:	f003 f9fb 	bl	8003f08 <memset>
    memset(line3, 0, sizeof(line3));
 8000b12:	2215      	movs	r2, #21
 8000b14:	2100      	movs	r1, #0
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000b18:	f003 f9f6 	bl	8003f08 <memset>
    memset(line4, 0, sizeof(line4));
 8000b1c:	2215      	movs	r2, #21
 8000b1e:	2100      	movs	r1, #0
 8000b20:	484a      	ldr	r0, [pc, #296]	@ (8000c4c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000b22:	f003 f9f1 	bl	8003f08 <memset>

    int start = 0, line = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i <= Size && line < 4; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e064      	b.n	8000bfe <HAL_UARTEx_RxEventCallback+0x18a>
      if (data_rx[i] == '\n' || data_rx[i] == '\0') {
 8000b34:	4a3c      	ldr	r2, [pc, #240]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b0a      	cmp	r3, #10
 8000b3e:	d005      	beq.n	8000b4c <HAL_UARTEx_RxEventCallback+0xd8>
 8000b40:	4a39      	ldr	r2, [pc, #228]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d155      	bne.n	8000bf8 <HAL_UARTEx_RxEventCallback+0x184>
        int len = i - start;
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	60bb      	str	r3, [r7, #8]
        if (len > 20) len = 20;
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b14      	cmp	r3, #20
 8000b58:	dd01      	ble.n	8000b5e <HAL_UARTEx_RxEventCallback+0xea>
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	60bb      	str	r3, [r7, #8]

        switch (line) {
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d843      	bhi.n	8000bec <HAL_UARTEx_RxEventCallback+0x178>
 8000b64:	a201      	add	r2, pc, #4	@ (adr r2, 8000b6c <HAL_UARTEx_RxEventCallback+0xf8>)
 8000b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000b7d 	.word	0x08000b7d
 8000b70:	08000b99 	.word	0x08000b99
 8000b74:	08000bb5 	.word	0x08000bb5
 8000b78:	08000bd1 	.word	0x08000bd1
          case 0: strncpy(line1, &data_rx[start], len); line1[len] = '\0'; break;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000b80:	4413      	add	r3, r2
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4619      	mov	r1, r3
 8000b86:	482e      	ldr	r0, [pc, #184]	@ (8000c40 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000b88:	f003 f9c6 	bl	8003f18 <strncpy>
 8000b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c40 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e029      	b.n	8000bec <HAL_UARTEx_RxEventCallback+0x178>
          case 1: strncpy(line2, &data_rx[start], len); line2[len] = '\0'; break;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000b9c:	4413      	add	r3, r2
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4828      	ldr	r0, [pc, #160]	@ (8000c44 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000ba4:	f003 f9b8 	bl	8003f18 <strncpy>
 8000ba8:	4a26      	ldr	r2, [pc, #152]	@ (8000c44 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	4413      	add	r3, r2
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e01b      	b.n	8000bec <HAL_UARTEx_RxEventCallback+0x178>
          case 2: strncpy(line3, &data_rx[start], len); line3[len] = '\0'; break;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000bb8:	4413      	add	r3, r2
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4822      	ldr	r0, [pc, #136]	@ (8000c48 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000bc0:	f003 f9aa 	bl	8003f18 <strncpy>
 8000bc4:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	4413      	add	r3, r2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e00d      	b.n	8000bec <HAL_UARTEx_RxEventCallback+0x178>
          case 3: strncpy(line4, &data_rx[start], len); line4[len] = '\0'; break;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4a15      	ldr	r2, [pc, #84]	@ (8000c28 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481c      	ldr	r0, [pc, #112]	@ (8000c4c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000bdc:	f003 f99c 	bl	8003f18 <strncpy>
 8000be0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c4c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	bf00      	nop
        }

        line++;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
        start = i + 1;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i <= Size && line < 4; i++) {
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dc02      	bgt.n	8000c0c <HAL_UARTEx_RxEventCallback+0x198>
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	dd93      	ble.n	8000b34 <HAL_UARTEx_RxEventCallback+0xc0>
      }
    }

    dataProcessed = 1;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
  }
    }
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, temp_data, sizeof(temp_data));
 8000c12:	2250      	movs	r2, #80	@ 0x50
 8000c14:	4905      	ldr	r1, [pc, #20]	@ (8000c2c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000c18:	f002 fdc3 	bl	80037a2 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40004400 	.word	0x40004400
 8000c28:	20000208 	.word	0x20000208
 8000c2c:	200001b8 	.word	0x200001b8
 8000c30:	08004864 	.word	0x08004864
 8000c34:	20000209 	.word	0x20000209
 8000c38:	200002b8 	.word	0x200002b8
 8000c3c:	200002cd 	.word	0x200002cd
 8000c40:	20000258 	.word	0x20000258
 8000c44:	20000270 	.word	0x20000270
 8000c48:	20000288 	.word	0x20000288
 8000c4c:	200002a0 	.word	0x200002a0
 8000c50:	200002b5 	.word	0x200002b5
 8000c54:	20000120 	.word	0x20000120

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	@ 0x30
 8000c5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fc1f 	bl	80014a0 <HAL_Init>
  HAL_Delay(2000);
 8000c62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c66:	f000 fc7d 	bl	8001564 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f8e9 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 f9ef 	bl	8001050 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f000 f9cf 	bl	8001014 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c76:	f000 f929 	bl	8000ecc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c7a:	f000 f955 	bl	8000f28 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c7e:	f000 f99f 	bl	8000fc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)temp_data, sizeof(temp_data));
 8000c82:	2250      	movs	r2, #80	@ 0x50
 8000c84:	495b      	ldr	r1, [pc, #364]	@ (8000df4 <main+0x19c>)
 8000c86:	485c      	ldr	r0, [pc, #368]	@ (8000df8 <main+0x1a0>)
 8000c88:	f002 fd8b 	bl	80037a2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);  // Tắt Half Transfer interrupt
 8000c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000dfc <main+0x1a4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b5a      	ldr	r3, [pc, #360]	@ (8000dfc <main+0x1a4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0204 	bic.w	r2, r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]


  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2314      	movs	r3, #20
 8000ca2:	224e      	movs	r2, #78	@ 0x4e
 8000ca4:	4956      	ldr	r1, [pc, #344]	@ (8000e00 <main+0x1a8>)
 8000ca6:	4857      	ldr	r0, [pc, #348]	@ (8000e04 <main+0x1ac>)
 8000ca8:	f7ff fd40 	bl	800072c <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4854      	ldr	r0, [pc, #336]	@ (8000e04 <main+0x1ac>)
 8000cb2:	f7ff fdab 	bl	800080c <CLCD_I2C_SetCursor>
  CLCD_I2C_Clear(&LCD1);
 8000cb6:	4853      	ldr	r0, [pc, #332]	@ (8000e04 <main+0x1ac>)
 8000cb8:	f7ff fe12 	bl	80008e0 <CLCD_I2C_Clear>
  char buffer[16];

  HAL_TIM_Base_Start(&htim2);
 8000cbc:	4852      	ldr	r0, [pc, #328]	@ (8000e08 <main+0x1b0>)
 8000cbe:	f002 fa21 	bl	8003104 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4851      	ldr	r0, [pc, #324]	@ (8000e0c <main+0x1b4>)
 8000cc8:	f001 f907 	bl	8001eda <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f000 fc49 	bl	8001564 <HAL_Delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	484d      	ldr	r0, [pc, #308]	@ (8000e0c <main+0x1b4>)
 8000cd8:	f001 f8ff 	bl	8001eda <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f000 fc41 	bl	8001564 <HAL_Delay>



  int lastWeight = -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight = weigh();
 8000ce8:	f7ff fe80 	bl	80009ec <weigh>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a48      	ldr	r2, [pc, #288]	@ (8000e10 <main+0x1b8>)
 8000cf0:	6013      	str	r3, [r2, #0]
	  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4843      	ldr	r0, [pc, #268]	@ (8000e04 <main+0x1ac>)
 8000cf8:	f7ff fd88 	bl	800080c <CLCD_I2C_SetCursor>
	  snprintf(buffer, sizeof(buffer), "KL: %06d g", weight);
 8000cfc:	4b44      	ldr	r3, [pc, #272]	@ (8000e10 <main+0x1b8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f107 0014 	add.w	r0, r7, #20
 8000d04:	4a43      	ldr	r2, [pc, #268]	@ (8000e14 <main+0x1bc>)
 8000d06:	2110      	movs	r1, #16
 8000d08:	f003 f8c8 	bl	8003e9c <sniprintf>
	  CLCD_I2C_WriteString(&LCD1, buffer);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	483c      	ldr	r0, [pc, #240]	@ (8000e04 <main+0x1ac>)
 8000d14:	f7ff fdcd 	bl	80008b2 <CLCD_I2C_WriteString>


	  if (nameReady) {
 8000d18:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <main+0x1c0>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d014      	beq.n	8000d4a <main+0xf2>
	    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4837      	ldr	r0, [pc, #220]	@ (8000e04 <main+0x1ac>)
 8000d26:	f7ff fd71 	bl	800080c <CLCD_I2C_SetCursor>
	    CLCD_I2C_WriteString(&LCD1, "                    ");  // clear dòng
 8000d2a:	493c      	ldr	r1, [pc, #240]	@ (8000e1c <main+0x1c4>)
 8000d2c:	4835      	ldr	r0, [pc, #212]	@ (8000e04 <main+0x1ac>)
 8000d2e:	f7ff fdc0 	bl	80008b2 <CLCD_I2C_WriteString>
	    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4833      	ldr	r0, [pc, #204]	@ (8000e04 <main+0x1ac>)
 8000d38:	f7ff fd68 	bl	800080c <CLCD_I2C_SetCursor>
	    CLCD_I2C_WriteString(&LCD1, productName);
 8000d3c:	4938      	ldr	r1, [pc, #224]	@ (8000e20 <main+0x1c8>)
 8000d3e:	4831      	ldr	r0, [pc, #196]	@ (8000e04 <main+0x1ac>)
 8000d40:	f7ff fdb7 	bl	80008b2 <CLCD_I2C_WriteString>
	    nameReady = 0;
 8000d44:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <main+0x1c0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	  }

	  // Hien thi gia tri khoi luong can va thong bao nhap xuat
	  if (dataProcessed) {
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <main+0x1cc>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d035      	beq.n	8000dbe <main+0x166>
	      CLCD_I2C_Clear(&LCD1);
 8000d52:	482c      	ldr	r0, [pc, #176]	@ (8000e04 <main+0x1ac>)
 8000d54:	f7ff fdc4 	bl	80008e0 <CLCD_I2C_Clear>
	      CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4829      	ldr	r0, [pc, #164]	@ (8000e04 <main+0x1ac>)
 8000d5e:	f7ff fd55 	bl	800080c <CLCD_I2C_SetCursor>
	      CLCD_I2C_WriteString(&LCD1, line1);
 8000d62:	4931      	ldr	r1, [pc, #196]	@ (8000e28 <main+0x1d0>)
 8000d64:	4827      	ldr	r0, [pc, #156]	@ (8000e04 <main+0x1ac>)
 8000d66:	f7ff fda4 	bl	80008b2 <CLCD_I2C_WriteString>
	      CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4825      	ldr	r0, [pc, #148]	@ (8000e04 <main+0x1ac>)
 8000d70:	f7ff fd4c 	bl	800080c <CLCD_I2C_SetCursor>
	      CLCD_I2C_WriteString(&LCD1, line2);
 8000d74:	492d      	ldr	r1, [pc, #180]	@ (8000e2c <main+0x1d4>)
 8000d76:	4823      	ldr	r0, [pc, #140]	@ (8000e04 <main+0x1ac>)
 8000d78:	f7ff fd9b 	bl	80008b2 <CLCD_I2C_WriteString>
	      CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4820      	ldr	r0, [pc, #128]	@ (8000e04 <main+0x1ac>)
 8000d82:	f7ff fd43 	bl	800080c <CLCD_I2C_SetCursor>
	      CLCD_I2C_WriteString(&LCD1, line3);
 8000d86:	492a      	ldr	r1, [pc, #168]	@ (8000e30 <main+0x1d8>)
 8000d88:	481e      	ldr	r0, [pc, #120]	@ (8000e04 <main+0x1ac>)
 8000d8a:	f7ff fd92 	bl	80008b2 <CLCD_I2C_WriteString>
	      CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000d8e:	2203      	movs	r2, #3
 8000d90:	2100      	movs	r1, #0
 8000d92:	481c      	ldr	r0, [pc, #112]	@ (8000e04 <main+0x1ac>)
 8000d94:	f7ff fd3a 	bl	800080c <CLCD_I2C_SetCursor>
	      CLCD_I2C_WriteString(&LCD1, line4);
 8000d98:	4926      	ldr	r1, [pc, #152]	@ (8000e34 <main+0x1dc>)
 8000d9a:	481a      	ldr	r0, [pc, #104]	@ (8000e04 <main+0x1ac>)
 8000d9c:	f7ff fd89 	bl	80008b2 <CLCD_I2C_WriteString>
	      memset(data_rx, 0, sizeof(data_rx));
 8000da0:	2250      	movs	r2, #80	@ 0x50
 8000da2:	2100      	movs	r1, #0
 8000da4:	4824      	ldr	r0, [pc, #144]	@ (8000e38 <main+0x1e0>)
 8000da6:	f003 f8af 	bl	8003f08 <memset>
	      dataProcessed = 0;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <main+0x1cc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
	      HAL_Delay(5000);
 8000db0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000db4:	f000 fbd6 	bl	8001564 <HAL_Delay>
	      CLCD_I2C_Clear(&LCD1);
 8000db8:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <main+0x1ac>)
 8000dba:	f7ff fd91 	bl	80008e0 <CLCD_I2C_Clear>
	  }



	  // gui du lieu can cho esp32cam
	  if (weight != lastWeight)
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <main+0x1b8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d08f      	beq.n	8000ce8 <main+0x90>
	  {
		  lastWeight = weight;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <main+0x1b8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
		  char sendBuffer[20];
		  snprintf(sendBuffer, sizeof(sendBuffer), "%d\n", weight); // Dạng: 123\n
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <main+0x1b8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	4a19      	ldr	r2, [pc, #100]	@ (8000e3c <main+0x1e4>)
 8000dd6:	2114      	movs	r1, #20
 8000dd8:	f003 f860 	bl	8003e9c <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)sendBuffer, strlen(sendBuffer), 100);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9b4 	bl	800014c <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4639      	mov	r1, r7
 8000dea:	2364      	movs	r3, #100	@ 0x64
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <main+0x1a0>)
 8000dee:	f002 fc4d 	bl	800368c <HAL_UART_Transmit>
  {
 8000df2:	e779      	b.n	8000ce8 <main+0x90>
 8000df4:	200001b8 	.word	0x200001b8
 8000df8:	20000120 	.word	0x20000120
 8000dfc:	20000168 	.word	0x20000168
 8000e00:	20000084 	.word	0x20000084
 8000e04:	200001ac 	.word	0x200001ac
 8000e08:	200000d8 	.word	0x200000d8
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	200002d0 	.word	0x200002d0
 8000e14:	08004868 	.word	0x08004868
 8000e18:	200002cd 	.word	0x200002cd
 8000e1c:	08004874 	.word	0x08004874
 8000e20:	200002b8 	.word	0x200002b8
 8000e24:	200002b5 	.word	0x200002b5
 8000e28:	20000258 	.word	0x20000258
 8000e2c:	20000270 	.word	0x20000270
 8000e30:	20000288 	.word	0x20000288
 8000e34:	200002a0 	.word	0x200002a0
 8000e38:	20000208 	.word	0x20000208
 8000e3c:	0800488c 	.word	0x0800488c

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	@ 0x40
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	@ 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 f85a 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e7e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fcdb 	bl	8002844 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e94:	f000 f964 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 ff48 	bl	8002d48 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ebe:	f000 f94f 	bl	8001160 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	@ 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <MX_I2C1_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x58>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000f0a:	f000 ffff 	bl	8001f0c <HAL_I2C_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 f924 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000084 	.word	0x20000084
 8000f20:	40005400 	.word	0x40005400
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f4e:	2247      	movs	r2, #71	@ 0x47
 8000f50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f6e:	f002 f879 	bl	8003064 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f78:	f000 f8f2 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000f8a:	f002 f905 	bl	8003198 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f94:	f000 f8e4 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_TIM2_Init+0x94>)
 8000fa6:	f002 fac3 	bl	8003530 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 f8d6 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000d8 	.word	0x200000d8

08000fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <MX_USART2_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f002 faf8 	bl	80035ec <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001002:	f000 f8ad 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000120 	.word	0x20000120
 8001010:	40004400 	.word	0x40004400

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_DMA_Init+0x38>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <MX_DMA_Init+0x38>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_DMA_Init+0x38>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2010      	movs	r0, #16
 8001038:	f000 fb8f 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 fba8 	bl	8001792 <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <MX_GPIO_Init+0x100>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <MX_GPIO_Init+0x100>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b37      	ldr	r3, [pc, #220]	@ (8001150 <MX_GPIO_Init+0x100>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <MX_GPIO_Init+0x100>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a33      	ldr	r2, [pc, #204]	@ (8001150 <MX_GPIO_Init+0x100>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <MX_GPIO_Init+0x100>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_GPIO_Init+0x100>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a2d      	ldr	r2, [pc, #180]	@ (8001150 <MX_GPIO_Init+0x100>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_GPIO_Init+0x100>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_GPIO_Init+0x100>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a27      	ldr	r2, [pc, #156]	@ (8001150 <MX_GPIO_Init+0x100>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <MX_GPIO_Init+0x100>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ca:	4822      	ldr	r0, [pc, #136]	@ (8001154 <MX_GPIO_Init+0x104>)
 80010cc:	f000 ff05 	bl	8001eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2110      	movs	r1, #16
 80010d4:	4820      	ldr	r0, [pc, #128]	@ (8001158 <MX_GPIO_Init+0x108>)
 80010d6:	f000 ff00 	bl	8001eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_GPIO_Init+0x104>)
 80010f4:	f000 fd56 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <MX_GPIO_Init+0x10c>)
 800110e:	f000 fd49 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001112:	2308      	movs	r3, #8
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_GPIO_Init+0x108>)
 8001126:	f000 fd3d 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800112a:	2310      	movs	r3, #16
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2302      	movs	r3, #2
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_GPIO_Init+0x108>)
 8001142:	f000 fd2f 	bl	8001ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40011000 	.word	0x40011000
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40010800 	.word	0x40010800

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <Error_Handler+0x8>

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <HAL_MspInit+0x5c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <HAL_MspInit+0x5c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_MspInit+0x60>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_MspInit+0x60>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <HAL_I2C_MspInit+0x70>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <HAL_I2C_MspInit+0x78>)
 800121c:	f000 fcc2 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800125c:	d10b      	bne.n	8001276 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_TIM_Base_MspInit+0x34>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_TIM_Base_MspInit+0x34>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_TIM_Base_MspInit+0x34>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <HAL_UART_MspInit+0xd8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d156      	bne.n	8001352 <HAL_UART_MspInit+0xce>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ae:	61d3      	str	r3, [r2, #28]
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a27      	ldr	r2, [pc, #156]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b25      	ldr	r3, [pc, #148]	@ (8001360 <HAL_UART_MspInit+0xdc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d4:	2304      	movs	r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	481f      	ldr	r0, [pc, #124]	@ (8001364 <HAL_UART_MspInit+0xe0>)
 80012e8:	f000 fc5c 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ec:	2308      	movs	r3, #8
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	4819      	ldr	r0, [pc, #100]	@ (8001364 <HAL_UART_MspInit+0xe0>)
 8001300:	f000 fc50 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001306:	4a19      	ldr	r2, [pc, #100]	@ (800136c <HAL_UART_MspInit+0xe8>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 800132a:	2220      	movs	r2, #32
 800132c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001334:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001336:	480c      	ldr	r0, [pc, #48]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 8001338:	f000 fa46 	bl	80017c8 <HAL_DMA_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001342:	f7ff ff0d 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 800134a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_UART_MspInit+0xe4>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40004400 	.word	0x40004400
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800
 8001368:	20000168 	.word	0x20000168
 800136c:	4002006c 	.word	0x4002006c

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8b4 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Channel6_IRQHandler+0x10>)
 80013ce:	f000 fab5 	bl	800193c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000168 	.word	0x20000168

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f002 fd98 	bl	8003f40 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20005000 	.word	0x20005000
 800143c:	00000400 	.word	0x00000400
 8001440:	200002d4 	.word	0x200002d4
 8001444:	20000428 	.word	0x20000428

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff fff8 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145a:	490c      	ldr	r1, [pc, #48]	@ (800148c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800145c:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001470:	4c09      	ldr	r4, [pc, #36]	@ (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f002 fd65 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fbe9 	bl	8000c58 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001490:	08004900 	.word	0x08004900
  ldr r2, =_sbss
 8001494:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001498:	20000424 	.word	0x20000424

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f947 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fe56 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f95f 	bl	80017ae <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f927 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000014 	.word	0x20000014
 8001528:	20000010 	.word	0x20000010

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	@ (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000014 	.word	0x20000014
 800154c:	200002d8 	.word	0x200002d8

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200002d8 	.word	0x200002d8

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fff0 	bl	8001550 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffe0 	bl	8001550 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000014 	.word	0x20000014

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4906      	ldr	r1, [pc, #24]	@ (8001644 <__NVIC_EnableIRQ+0x34>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff90 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff2d 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff42 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff90 	bl	800169c <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5f 	bl	8001648 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff35 	bl	8001610 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e043      	b.n	8001866 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_DMA_Init+0xa8>)
 80017e6:	4413      	add	r3, r2
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_DMA_Init+0xac>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	009a      	lsls	r2, r3, #2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001878 <HAL_DMA_Init+0xb0>)
 80017fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001812:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	bffdfff8 	.word	0xbffdfff8
 8001874:	cccccccd 	.word	0xcccccccd
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_DMA_Start_IT+0x20>
 8001898:	2302      	movs	r3, #2
 800189a:	e04b      	b.n	8001934 <HAL_DMA_Start_IT+0xb8>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d13a      	bne.n	8001926 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f937 	bl	8001b48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 020e 	orr.w	r2, r2, #14
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e00f      	b.n	8001914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0204 	bic.w	r2, r2, #4
 8001902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 020a 	orr.w	r2, r2, #10
 8001912:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e005      	b.n	8001932 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d04f      	beq.n	8001a04 <HAL_DMA_IRQHandler+0xc8>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d04a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a66      	ldr	r2, [pc, #408]	@ (8001b2c <HAL_DMA_IRQHandler+0x1f0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d029      	beq.n	80019ea <HAL_DMA_IRQHandler+0xae>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a65      	ldr	r2, [pc, #404]	@ (8001b30 <HAL_DMA_IRQHandler+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xaa>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a63      	ldr	r2, [pc, #396]	@ (8001b34 <HAL_DMA_IRQHandler+0x1f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMA_IRQHandler+0xa4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a62      	ldr	r2, [pc, #392]	@ (8001b38 <HAL_DMA_IRQHandler+0x1fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d012      	beq.n	80019da <HAL_DMA_IRQHandler+0x9e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a60      	ldr	r2, [pc, #384]	@ (8001b3c <HAL_DMA_IRQHandler+0x200>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x98>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b40 <HAL_DMA_IRQHandler+0x204>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <HAL_DMA_IRQHandler+0x92>
 80019c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019cc:	e00e      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019d2:	e00b      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019d8:	e008      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019de:	e005      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e4:	e002      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019e6:	2340      	movs	r3, #64	@ 0x40
 80019e8:	e000      	b.n	80019ec <HAL_DMA_IRQHandler+0xb0>
 80019ea:	2304      	movs	r3, #4
 80019ec:	4a55      	ldr	r2, [pc, #340]	@ (8001b44 <HAL_DMA_IRQHandler+0x208>)
 80019ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8094 	beq.w	8001b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a02:	e08e      	b.n	8001b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	2202      	movs	r2, #2
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d056      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x186>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d051      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10b      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020a 	bic.w	r2, r2, #10
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a38      	ldr	r2, [pc, #224]	@ (8001b2c <HAL_DMA_IRQHandler+0x1f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d029      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x166>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a37      	ldr	r2, [pc, #220]	@ (8001b30 <HAL_DMA_IRQHandler+0x1f4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d022      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x162>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a35      	ldr	r2, [pc, #212]	@ (8001b34 <HAL_DMA_IRQHandler+0x1f8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01a      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x15c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a34      	ldr	r2, [pc, #208]	@ (8001b38 <HAL_DMA_IRQHandler+0x1fc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d012      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x156>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <HAL_DMA_IRQHandler+0x200>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x150>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <HAL_DMA_IRQHandler+0x204>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d102      	bne.n	8001a86 <HAL_DMA_IRQHandler+0x14a>
 8001a80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a84:	e00e      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001a86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a8a:	e00b      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a90:	e008      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a96:	e005      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9c:	e002      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e000      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	4a27      	ldr	r2, [pc, #156]	@ (8001b44 <HAL_DMA_IRQHandler+0x208>)
 8001aa6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d034      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ac0:	e02f      	b.n	8001b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d028      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x1e8>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d023      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020e 	bic.w	r2, r2, #14
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
    }
  }
  return;
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
}
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40020008 	.word	0x40020008
 8001b30:	4002001c 	.word	0x4002001c
 8001b34:	40020030 	.word	0x40020030
 8001b38:	40020044 	.word	0x40020044
 8001b3c:	40020058 	.word	0x40020058
 8001b40:	4002006c 	.word	0x4002006c
 8001b44:	40020000 	.word	0x40020000

08001b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d108      	bne.n	8001b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b86:	e007      	b.n	8001b98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b08b      	sub	sp, #44	@ 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e169      	b.n	8001e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8158 	bne.w	8001e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a9a      	ldr	r2, [pc, #616]	@ (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d05e      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001be0:	4a98      	ldr	r2, [pc, #608]	@ (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d875      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001be6:	4a98      	ldr	r2, [pc, #608]	@ (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d058      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bec:	4a96      	ldr	r2, [pc, #600]	@ (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d86f      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a96      	ldr	r2, [pc, #600]	@ (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d052      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bf8:	4a94      	ldr	r2, [pc, #592]	@ (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d869      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a94      	ldr	r2, [pc, #592]	@ (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04c      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c04:	4a92      	ldr	r2, [pc, #584]	@ (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d863      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a92      	ldr	r2, [pc, #584]	@ (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d046      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c10:	4a90      	ldr	r2, [pc, #576]	@ (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d85d      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d82a      	bhi.n	8001c70 <HAL_GPIO_Init+0xcc>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d859      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <HAL_GPIO_Init+0x80>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001c8b 	.word	0x08001c8b
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001cd3 	.word	0x08001cd3
 8001c38:	08001cd3 	.word	0x08001cd3
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cd3 	.word	0x08001cd3
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001cd3 	.word	0x08001cd3
 8001c4c:	08001cd3 	.word	0x08001cd3
 8001c50:	08001cd3 	.word	0x08001cd3
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001cd3 	.word	0x08001cd3
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001cd3 	.word	0x08001cd3
 8001c64:	08001cd3 	.word	0x08001cd3
 8001c68:	08001c81 	.word	0x08001c81
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	4a79      	ldr	r2, [pc, #484]	@ (8001e58 <HAL_GPIO_Init+0x2b4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c76:	e02c      	b.n	8001cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e029      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	3304      	adds	r3, #4
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e024      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e01f      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e01a      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e013      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	611a      	str	r2, [r3, #16]
          break;
 8001cbe:	e009      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	615a      	str	r2, [r3, #20]
          break;
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          break;
 8001cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	@ 0xff
 8001cd8:	d801      	bhi.n	8001cde <HAL_GPIO_Init+0x13a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_Init+0x13e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	@ 0xff
 8001ce8:	d802      	bhi.n	8001cf0 <HAL_GPIO_Init+0x14c>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x152>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80b1 	beq.w	8001e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d24:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a4c      	ldr	r2, [pc, #304]	@ (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a40      	ldr	r2, [pc, #256]	@ (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1ec>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e68 <HAL_GPIO_Init+0x2c4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1e8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3e      	ldr	r2, [pc, #248]	@ (8001e6c <HAL_GPIO_Init+0x2c8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e70 <HAL_GPIO_Init+0x2cc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1e0>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e006      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e004      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d90:	2300      	movs	r3, #0
 8001d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001da2:	492f      	ldr	r1, [pc, #188]	@ (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	492c      	ldr	r1, [pc, #176]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dca:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4928      	ldr	r1, [pc, #160]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de4:	4b23      	ldr	r3, [pc, #140]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4922      	ldr	r1, [pc, #136]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	491e      	ldr	r1, [pc, #120]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4918      	ldr	r1, [pc, #96]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4914      	ldr	r1, [pc, #80]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d021      	beq.n	8001e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	490e      	ldr	r1, [pc, #56]	@ (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e021      	b.n	8001e86 <HAL_GPIO_Init+0x2e2>
 8001e42:	bf00      	nop
 8001e44:	10320000 	.word	0x10320000
 8001e48:	10310000 	.word	0x10310000
 8001e4c:	10220000 	.word	0x10220000
 8001e50:	10210000 	.word	0x10210000
 8001e54:	10120000 	.word	0x10120000
 8001e58:	10110000 	.word	0x10110000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	40011400 	.word	0x40011400
 8001e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4909      	ldr	r1, [pc, #36]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f ae8e 	bne.w	8001bb8 <HAL_GPIO_Init+0x14>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	372c      	adds	r7, #44	@ 0x2c
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eea:	787b      	ldrb	r3, [r7, #1]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff f94c 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	@ 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 f832 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	@ (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	@ (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	@ (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	@ (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	@ (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	@ (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff f9d2 	bl	8001550 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80e0 	bne.w	800237c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	4970      	ldr	r1, [pc, #448]	@ (8002388 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f964 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0d3      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x50>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	@ 0x21
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a50      	ldr	r2, [pc, #320]	@ (800238c <HAL_I2C_Master_Transmit+0x1f8>)
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f89c 	bl	8002390 <I2C_MasterRequestWrite>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e08d      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002278:	e066      	b.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa22 	bl	80026c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Master_Transmit+0x188>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa19 	bl	8002758 <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01a      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d194      	bne.n	800227a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d006      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b8:	d108      	bne.n	80023cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00b      	b.n	80023e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d107      	bne.n	80023e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f84f 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800240a:	d103      	bne.n	8002414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e035      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e01b      	b.n	800246c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	11db      	asrs	r3, r3, #7
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f063 030f 	orn	r3, r3, #15
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	490e      	ldr	r1, [pc, #56]	@ (800248c <I2C_MasterRequestWrite+0xfc>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f898 	bl	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e010      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4907      	ldr	r1, [pc, #28]	@ (8002490 <I2C_MasterRequestWrite+0x100>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f888 	bl	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010008 	.word	0x00010008
 8002490:	00010002 	.word	0x00010002

08002494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a4:	e048      	b.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d044      	beq.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f84f 	bl	8001550 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d139      	bne.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d10d      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	43da      	mvns	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	e00c      	b.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	43da      	mvns	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d116      	bne.n	8002538 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e023      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10d      	bne.n	800255e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	43da      	mvns	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	e00c      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	43da      	mvns	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	429a      	cmp	r2, r3
 800257c:	d093      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002596:	e071      	b.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d123      	bne.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e067      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d041      	beq.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f8:	f7fe ffaa 	bl	8001550 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d136      	bne.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10c      	bne.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e00b      	b.n	800264a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	43da      	mvns	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e021      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d10c      	bne.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e00b      	b.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f af6d 	bne.w	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d4:	e034      	b.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f886 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e034      	b.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d028      	beq.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe ff2f 	bl	8001550 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11d      	bne.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b80      	cmp	r3, #128	@ 0x80
 8002710:	d016      	beq.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e007      	b.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	2b80      	cmp	r3, #128	@ 0x80
 800274c:	d1c3      	bne.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002764:	e034      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f83e 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e034      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d028      	beq.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe fee7 	bl	8001550 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d016      	beq.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d1c3      	bne.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fe:	d11b      	bne.n	8002838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e272      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8087 	beq.w	8002972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002864:	4b92      	ldr	r3, [pc, #584]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00c      	beq.n	800288a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002870:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d112      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
 800287c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002888:	d10b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d06c      	beq.n	8002970 <HAL_RCC_OscConfig+0x12c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d168      	bne.n	8002970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e24c      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x76>
 80028ac:	4b80      	ldr	r3, [pc, #512]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x98>
 80028c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b78      	ldr	r3, [pc, #480]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a77      	ldr	r2, [pc, #476]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xbc>
 80028e6:	4b72      	ldr	r3, [pc, #456]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a71      	ldr	r2, [pc, #452]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xd4>
 8002900:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a67      	ldr	r2, [pc, #412]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fe16 	bl	8001550 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fe12 	bl	8001550 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e200      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xe4>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fe02 	bl	8001550 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fdfe 	bl	8001550 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1ec      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b53      	ldr	r3, [pc, #332]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x10c>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800297e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800298a:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
 8002996:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c0      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4939      	ldr	r1, [pc, #228]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x270>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fdb7 	bl	8001550 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fdb3 	bl	8001550 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4927      	ldr	r1, [pc, #156]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd96 	bl	8001550 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fd92 	bl	8001550 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e180      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03a      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fd76 	bl	8001550 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe fd72 	bl	8001550 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e160      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 face 	bl	8003028 <RCC_Delay>
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fd5c 	bl	8001550 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	e00f      	b.n	8002abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fd58 	bl	8001550 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d908      	bls.n	8002abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e146      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	42420000 	.word	0x42420000
 8002ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b92      	ldr	r3, [pc, #584]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e9      	bne.n	8002a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a6 	beq.w	8002c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b8b      	ldr	r3, [pc, #556]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b88      	ldr	r3, [pc, #544]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a87      	ldr	r2, [pc, #540]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b85      	ldr	r3, [pc, #532]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d118      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fd19 	bl	8001550 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe fd15 	bl	8001550 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	@ 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e103      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_OscConfig+0x4c8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x312>
 8002b48:	4b6f      	ldr	r3, [pc, #444]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e02d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x334>
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a69      	ldr	r2, [pc, #420]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b67      	ldr	r3, [pc, #412]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a66      	ldr	r2, [pc, #408]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	e01c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCC_OscConfig+0x356>
 8002b80:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a60      	ldr	r2, [pc, #384]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x36e>
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d015      	beq.n	8002be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fcc9 	bl	8001550 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fcc5 	bl	8001550 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0b1      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ee      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
 8002be4:	e014      	b.n	8002c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fcb3 	bl	8001550 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe fcaf 	bl	8001550 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e09b      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ee      	bne.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b3c      	ldr	r3, [pc, #240]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8087 	beq.w	8002d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2c:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d061      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d146      	bne.n	8002cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b33      	ldr	r3, [pc, #204]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe fc83 	bl	8001550 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fc7f 	bl	8001550 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e06d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c60:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c74:	d108      	bne.n	8002c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4921      	ldr	r1, [pc, #132]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a19      	ldr	r1, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fc53 	bl	8001550 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe fc4f 	bl	8001550 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x46a>
 8002ccc:	e035      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fc3c 	bl	8001550 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fc38 	bl	8001550 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e026      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x498>
 8002cfa:	e01e      	b.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e019      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_RCC_OscConfig+0x500>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d0      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4965      	ldr	r1, [pc, #404]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d040      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d115      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e073      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b3d      	ldr	r3, [pc, #244]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4936      	ldr	r1, [pc, #216]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fe fb8a 	bl	8001550 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe fb86 	bl	8001550 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e053      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d210      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4922      	ldr	r1, [pc, #136]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	@ (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	@ (8002f14 <HAL_RCC_ClockConfig+0x1cc>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1d0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fae8 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08004890 	.word	0x08004890
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	20000010 	.word	0x20000010

08002f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x30>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x36>
 8002f4a:	e027      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	613b      	str	r3, [r7, #16]
      break;
 8002f50:	e027      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0c5b      	lsrs	r3, r3, #17
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e004      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	613b      	str	r3, [r7, #16]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa2:	693b      	ldr	r3, [r7, #16]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	007a1200 	.word	0x007a1200
 8002fb8:	080048a8 	.word	0x080048a8
 8002fbc:	080048b8 	.word	0x080048b8
 8002fc0:	003d0900 	.word	0x003d0900

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	@ (8002fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff2 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	@ (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	080048a0 	.word	0x080048a0

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0adb      	lsrs	r3, r3, #11
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	080048a0 	.word	0x080048a0

08003028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <RCC_Delay+0x34>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <RCC_Delay+0x38>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003044:	bf00      	nop
  }
  while (Delay --);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	60fa      	str	r2, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <RCC_Delay+0x1c>
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	2000000c 	.word	0x2000000c
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e041      	b.n	80030fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe f8de 	bl	800124c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 f940 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_TIM_Base_Start+0x88>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start+0x48>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start+0x48>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	@ (8003190 <HAL_TIM_Base_Start+0x8c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start+0x48>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <HAL_TIM_Base_Start+0x90>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_ConfigClockSource+0x1c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0b4      	b.n	800331e <HAL_TIM_ConfigClockSource+0x186>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ec:	d03e      	beq.n	800326c <HAL_TIM_ConfigClockSource+0xd4>
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f2:	f200 8087 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fa:	f000 8086 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x172>
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003202:	d87f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b70      	cmp	r3, #112	@ 0x70
 8003206:	d01a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0xa6>
 8003208:	2b70      	cmp	r3, #112	@ 0x70
 800320a:	d87b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b60      	cmp	r3, #96	@ 0x60
 800320e:	d050      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003210:	2b60      	cmp	r3, #96	@ 0x60
 8003212:	d877      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b50      	cmp	r3, #80	@ 0x50
 8003216:	d03c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xfa>
 8003218:	2b50      	cmp	r3, #80	@ 0x50
 800321a:	d873      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800321c:	2b40      	cmp	r3, #64	@ 0x40
 800321e:	d058      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	d86f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003224:	2b30      	cmp	r3, #48	@ 0x30
 8003226:	d064      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003228:	2b30      	cmp	r3, #48	@ 0x30
 800322a:	d86b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d060      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d867      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003238:	2b10      	cmp	r3, #16
 800323a:	d05a      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	e062      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	f000 f950 	bl	80034f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	609a      	str	r2, [r3, #8]
      break;
 800326a:	e04f      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	f000 f939 	bl	80034f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800328e:	609a      	str	r2, [r3, #8]
      break;
 8003290:	e03c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f8b0 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2150      	movs	r1, #80	@ 0x50
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f907 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80032b0:	e02c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f8ce 	bl	8003460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2160      	movs	r1, #96	@ 0x60
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f8f7 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80032d0:	e01c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 f890 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2140      	movs	r1, #64	@ 0x40
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f8e7 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80032f0:	e00c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f000 f8de 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003302:	e003      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e000      	b.n	800330c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800330a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a2f      	ldr	r2, [pc, #188]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <TIM_Base_SetConfig+0xd4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <TIM_Base_SetConfig+0xd8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d007      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <TIM_Base_SetConfig+0xd4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <TIM_Base_SetConfig+0xd8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <TIM_Base_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
  }
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 030a 	bic.w	r3, r3, #10
 8003440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0210 	bic.w	r2, r3, #16
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	031b      	lsls	r3, r3, #12
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	621a      	str	r2, [r3, #32]
}
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f043 0307 	orr.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800350c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	431a      	orrs	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	609a      	str	r2, [r3, #8]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e046      	b.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00e      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d009      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a10      	ldr	r2, [pc, #64]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10c      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fe36 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fba5 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d175      	bne.n	8003798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Transmit+0x2c>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e06e      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	@ 0x21
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fd ff41 	bl	8001550 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003700:	e02e      	b.n	8003760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f9ba 	bl	8003a86 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03a      	b.n	800379a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3302      	adds	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e007      	b.n	8003752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1cb      	bne.n	8003702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	@ 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f986 	bl	8003a86 <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08c      	sub	sp, #48	@ 0x30
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d146      	bne.n	800384a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e03f      	b.n	800384c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	461a      	mov	r2, r3
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f9aa 	bl	8003b38 <UART_Start_Receive_DMA>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d125      	bne.n	800383e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	617b      	str	r3, [r7, #20]
   return(result);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f043 0310 	orr.w	r3, r3, #16
 800381e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003828:	627a      	str	r2, [r7, #36]	@ 0x24
 800382a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	61fb      	str	r3, [r7, #28]
   return(result);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800383c:	e002      	b.n	8003844 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003848:	e000      	b.n	800384c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3730      	adds	r7, #48	@ 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b09c      	sub	sp, #112	@ 0x70
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d172      	bne.n	800398c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80038a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a8:	2200      	movs	r2, #0
 80038aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003900:	647a      	str	r2, [r7, #68]	@ 0x44
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	623b      	str	r3, [r7, #32]
   return(result);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800392a:	663b      	str	r3, [r7, #96]	@ 0x60
 800392c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003934:	633a      	str	r2, [r7, #48]	@ 0x30
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d119      	bne.n	800398c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	60fb      	str	r3, [r7, #12]
   return(result);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0310 	bic.w	r3, r3, #16
 800396e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003978:	61fa      	str	r2, [r7, #28]
 800397a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	617b      	str	r3, [r7, #20]
   return(result);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398e:	2200      	movs	r2, #0
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	2b01      	cmp	r3, #1
 8003998:	d106      	bne.n	80039a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800399a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800399e:	4619      	mov	r1, r3
 80039a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039a2:	f7fd f867 	bl	8000a74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039a6:	e002      	b.n	80039ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80039a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039aa:	f7ff ff53 	bl	8003854 <HAL_UART_RxCpltCallback>
}
 80039ae:	bf00      	nop
 80039b0:	3770      	adds	r7, #112	@ 0x70
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d108      	bne.n	80039e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4619      	mov	r1, r3
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fd f849 	bl	8000a74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039e2:	e002      	b.n	80039ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff ff3e 	bl	8003866 <HAL_UART_RxHalfCpltCallback>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b21      	cmp	r3, #33	@ 0x21
 8003a24:	d108      	bne.n	8003a38 <UART_DMAError+0x46>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003a32:	68b8      	ldr	r0, [r7, #8]
 8003a34:	f000 f91a 	bl	8003c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b22      	cmp	r3, #34	@ 0x22
 8003a58:	d108      	bne.n	8003a6c <UART_DMAError+0x7a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003a66:	68b8      	ldr	r0, [r7, #8]
 8003a68:	f000 f927 	bl	8003cba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	f043 0210 	orr.w	r2, r3, #16
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f7ff fefd 	bl	8003878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a96:	e03b      	b.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d037      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa0:	f7fd fd56 	bl	8001550 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e03a      	b.n	8003b30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d023      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d020      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d01d      	beq.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d116      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8de 	bl	8003cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2208      	movs	r2, #8
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e00f      	b.n	8003b30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d0b4      	beq.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b098      	sub	sp, #96	@ 0x60
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2222      	movs	r2, #34	@ 0x22
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	4a3e      	ldr	r2, [pc, #248]	@ (8003c60 <UART_Start_Receive_DMA+0x128>)
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c64 <UART_Start_Receive_DMA+0x12c>)
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	4a3c      	ldr	r2, [pc, #240]	@ (8003c68 <UART_Start_Receive_DMA+0x130>)
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f7fd fe70 	bl	800187c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	617b      	str	r3, [r7, #20]
   return(result);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6a39      	ldr	r1, [r7, #32]
 8003c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3760      	adds	r7, #96	@ 0x60
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	0800388b 	.word	0x0800388b
 8003c64:	080039b7 	.word	0x080039b7
 8003c68:	080039f3 	.word	0x080039f3

08003c6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	@ 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	61ba      	str	r2, [r7, #24]
 8003c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e5      	bne.n	8003c74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003cb0:	bf00      	nop
 8003cb2:	3724      	adds	r7, #36	@ 0x24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b095      	sub	sp, #84	@ 0x54
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e5      	bne.n	8003cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e5      	bne.n	8003cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d119      	bne.n	8003d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d52:	61ba      	str	r2, [r7, #24]
 8003d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d74:	bf00      	nop
 8003d76:	3754      	adds	r7, #84	@ 0x54
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003dba:	f023 030c 	bic.w	r3, r3, #12
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e94 <UART_SetConfig+0x114>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7ff f90a 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	e002      	b.n	8003df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7ff f8f2 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8003df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009a      	lsls	r2, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <UART_SetConfig+0x118>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	0119      	lsls	r1, r3, #4
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009a      	lsls	r2, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <UART_SetConfig+0x118>)
 8003e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2064      	movs	r0, #100	@ 0x64
 8003e36:	fb00 f303 	mul.w	r3, r0, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	3332      	adds	r3, #50	@ 0x32
 8003e40:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <UART_SetConfig+0x118>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e4c:	4419      	add	r1, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009a      	lsls	r2, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <UART_SetConfig+0x118>)
 8003e66:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2064      	movs	r0, #100	@ 0x64
 8003e6e:	fb00 f303 	mul.w	r3, r0, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	3332      	adds	r3, #50	@ 0x32
 8003e78:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <UART_SetConfig+0x118>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	440a      	add	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40013800 	.word	0x40013800
 8003e98:	51eb851f 	.word	0x51eb851f

08003e9c <sniprintf>:
 8003e9c:	b40c      	push	{r2, r3}
 8003e9e:	b530      	push	{r4, r5, lr}
 8003ea0:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <sniprintf+0x68>)
 8003ea2:	1e0c      	subs	r4, r1, #0
 8003ea4:	681d      	ldr	r5, [r3, #0]
 8003ea6:	b09d      	sub	sp, #116	@ 0x74
 8003ea8:	da08      	bge.n	8003ebc <sniprintf+0x20>
 8003eaa:	238b      	movs	r3, #139	@ 0x8b
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	b01d      	add	sp, #116	@ 0x74
 8003eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb8:	b002      	add	sp, #8
 8003eba:	4770      	bx	lr
 8003ebc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003eca:	bf0c      	ite	eq
 8003ecc:	4623      	moveq	r3, r4
 8003ece:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	9307      	str	r3, [sp, #28]
 8003ed6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003eda:	9002      	str	r0, [sp, #8]
 8003edc:	9006      	str	r0, [sp, #24]
 8003ede:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	ab21      	add	r3, sp, #132	@ 0x84
 8003ee6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ee8:	a902      	add	r1, sp, #8
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	f000 f9b4 	bl	8004258 <_svfiprintf_r>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	bfbc      	itt	lt
 8003ef4:	238b      	movlt	r3, #139	@ 0x8b
 8003ef6:	602b      	strlt	r3, [r5, #0]
 8003ef8:	2c00      	cmp	r4, #0
 8003efa:	d0da      	beq.n	8003eb2 <sniprintf+0x16>
 8003efc:	2200      	movs	r2, #0
 8003efe:	9b02      	ldr	r3, [sp, #8]
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e7d6      	b.n	8003eb2 <sniprintf+0x16>
 8003f04:	20000018 	.word	0x20000018

08003f08 <memset>:
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4402      	add	r2, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <strncpy>:
 8003f18:	4603      	mov	r3, r0
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	3901      	subs	r1, #1
 8003f1e:	b132      	cbz	r2, 8003f2e <strncpy+0x16>
 8003f20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f24:	3a01      	subs	r2, #1
 8003f26:	f803 4b01 	strb.w	r4, [r3], #1
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d1f7      	bne.n	8003f1e <strncpy+0x6>
 8003f2e:	2100      	movs	r1, #0
 8003f30:	441a      	add	r2, r3
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d100      	bne.n	8003f38 <strncpy+0x20>
 8003f36:	bd10      	pop	{r4, pc}
 8003f38:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3c:	e7f9      	b.n	8003f32 <strncpy+0x1a>
	...

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	@ (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000018 	.word	0x20000018

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	2600      	movs	r6, #0
 8003f50:	4d0c      	ldr	r5, [pc, #48]	@ (8003f84 <__libc_init_array+0x38>)
 8003f52:	4c0d      	ldr	r4, [pc, #52]	@ (8003f88 <__libc_init_array+0x3c>)
 8003f54:	1b64      	subs	r4, r4, r5
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	42a6      	cmp	r6, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	f000 fc76 	bl	800484c <_init>
 8003f60:	2600      	movs	r6, #0
 8003f62:	4d0a      	ldr	r5, [pc, #40]	@ (8003f8c <__libc_init_array+0x40>)
 8003f64:	4c0a      	ldr	r4, [pc, #40]	@ (8003f90 <__libc_init_array+0x44>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	42a6      	cmp	r6, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f74:	4798      	blx	r3
 8003f76:	3601      	adds	r6, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7e:	4798      	blx	r3
 8003f80:	3601      	adds	r6, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	080048f8 	.word	0x080048f8
 8003f88:	080048f8 	.word	0x080048f8
 8003f8c:	080048f8 	.word	0x080048f8
 8003f90:	080048fc 	.word	0x080048fc

08003f94 <__retarget_lock_acquire_recursive>:
 8003f94:	4770      	bx	lr

08003f96 <__retarget_lock_release_recursive>:
 8003f96:	4770      	bx	lr

08003f98 <memcpy>:
 8003f98:	440a      	add	r2, r1
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa0:	d100      	bne.n	8003fa4 <memcpy+0xc>
 8003fa2:	4770      	bx	lr
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003faa:	4291      	cmp	r1, r2
 8003fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb0:	d1f9      	bne.n	8003fa6 <memcpy+0xe>
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d040      	beq.n	800403e <_free_r+0x8a>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 f8de 	bl	8004188 <__malloc_lock>
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <_free_r+0x8c>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	b933      	cbnz	r3, 8003fe0 <_free_r+0x2c>
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6014      	str	r4, [r2, #0]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fdc:	f000 b8da 	b.w	8004194 <__malloc_unlock>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d908      	bls.n	8003ff6 <_free_r+0x42>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	1821      	adds	r1, r4, r0
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	bf01      	itttt	eq
 8003fec:	6819      	ldreq	r1, [r3, #0]
 8003fee:	685b      	ldreq	r3, [r3, #4]
 8003ff0:	1809      	addeq	r1, r1, r0
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	e7ed      	b.n	8003fd2 <_free_r+0x1e>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b10b      	cbz	r3, 8004000 <_free_r+0x4c>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d9fa      	bls.n	8003ff6 <_free_r+0x42>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	1850      	adds	r0, r2, r1
 8004004:	42a0      	cmp	r0, r4
 8004006:	d10b      	bne.n	8004020 <_free_r+0x6c>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	4401      	add	r1, r0
 800400c:	1850      	adds	r0, r2, r1
 800400e:	4283      	cmp	r3, r0
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	d1e0      	bne.n	8003fd6 <_free_r+0x22>
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4408      	add	r0, r1
 800401a:	6010      	str	r0, [r2, #0]
 800401c:	6053      	str	r3, [r2, #4]
 800401e:	e7da      	b.n	8003fd6 <_free_r+0x22>
 8004020:	d902      	bls.n	8004028 <_free_r+0x74>
 8004022:	230c      	movs	r3, #12
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	e7d6      	b.n	8003fd6 <_free_r+0x22>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	1821      	adds	r1, r4, r0
 800402c:	428b      	cmp	r3, r1
 800402e:	bf01      	itttt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	1809      	addeq	r1, r1, r0
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6054      	str	r4, [r2, #4]
 800403c:	e7cb      	b.n	8003fd6 <_free_r+0x22>
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000420 	.word	0x20000420

08004044 <sbrk_aligned>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4e0f      	ldr	r6, [pc, #60]	@ (8004084 <sbrk_aligned+0x40>)
 8004048:	460c      	mov	r4, r1
 800404a:	6831      	ldr	r1, [r6, #0]
 800404c:	4605      	mov	r5, r0
 800404e:	b911      	cbnz	r1, 8004056 <sbrk_aligned+0x12>
 8004050:	f000 fba8 	bl	80047a4 <_sbrk_r>
 8004054:	6030      	str	r0, [r6, #0]
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fba3 	bl	80047a4 <_sbrk_r>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d103      	bne.n	800406a <sbrk_aligned+0x26>
 8004062:	f04f 34ff 	mov.w	r4, #4294967295
 8004066:	4620      	mov	r0, r4
 8004068:	bd70      	pop	{r4, r5, r6, pc}
 800406a:	1cc4      	adds	r4, r0, #3
 800406c:	f024 0403 	bic.w	r4, r4, #3
 8004070:	42a0      	cmp	r0, r4
 8004072:	d0f8      	beq.n	8004066 <sbrk_aligned+0x22>
 8004074:	1a21      	subs	r1, r4, r0
 8004076:	4628      	mov	r0, r5
 8004078:	f000 fb94 	bl	80047a4 <_sbrk_r>
 800407c:	3001      	adds	r0, #1
 800407e:	d1f2      	bne.n	8004066 <sbrk_aligned+0x22>
 8004080:	e7ef      	b.n	8004062 <sbrk_aligned+0x1e>
 8004082:	bf00      	nop
 8004084:	2000041c 	.word	0x2000041c

08004088 <_malloc_r>:
 8004088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800408c:	1ccd      	adds	r5, r1, #3
 800408e:	f025 0503 	bic.w	r5, r5, #3
 8004092:	3508      	adds	r5, #8
 8004094:	2d0c      	cmp	r5, #12
 8004096:	bf38      	it	cc
 8004098:	250c      	movcc	r5, #12
 800409a:	2d00      	cmp	r5, #0
 800409c:	4606      	mov	r6, r0
 800409e:	db01      	blt.n	80040a4 <_malloc_r+0x1c>
 80040a0:	42a9      	cmp	r1, r5
 80040a2:	d904      	bls.n	80040ae <_malloc_r+0x26>
 80040a4:	230c      	movs	r3, #12
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	2000      	movs	r0, #0
 80040aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004184 <_malloc_r+0xfc>
 80040b2:	f000 f869 	bl	8004188 <__malloc_lock>
 80040b6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ba:	461c      	mov	r4, r3
 80040bc:	bb44      	cbnz	r4, 8004110 <_malloc_r+0x88>
 80040be:	4629      	mov	r1, r5
 80040c0:	4630      	mov	r0, r6
 80040c2:	f7ff ffbf 	bl	8004044 <sbrk_aligned>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	4604      	mov	r4, r0
 80040ca:	d158      	bne.n	800417e <_malloc_r+0xf6>
 80040cc:	f8d8 4000 	ldr.w	r4, [r8]
 80040d0:	4627      	mov	r7, r4
 80040d2:	2f00      	cmp	r7, #0
 80040d4:	d143      	bne.n	800415e <_malloc_r+0xd6>
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	d04b      	beq.n	8004172 <_malloc_r+0xea>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	4639      	mov	r1, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	eb04 0903 	add.w	r9, r4, r3
 80040e4:	f000 fb5e 	bl	80047a4 <_sbrk_r>
 80040e8:	4581      	cmp	r9, r0
 80040ea:	d142      	bne.n	8004172 <_malloc_r+0xea>
 80040ec:	6821      	ldr	r1, [r4, #0]
 80040ee:	4630      	mov	r0, r6
 80040f0:	1a6d      	subs	r5, r5, r1
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7ff ffa6 	bl	8004044 <sbrk_aligned>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d03a      	beq.n	8004172 <_malloc_r+0xea>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	442b      	add	r3, r5
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	f8d8 3000 	ldr.w	r3, [r8]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	bb62      	cbnz	r2, 8004164 <_malloc_r+0xdc>
 800410a:	f8c8 7000 	str.w	r7, [r8]
 800410e:	e00f      	b.n	8004130 <_malloc_r+0xa8>
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	1b52      	subs	r2, r2, r5
 8004114:	d420      	bmi.n	8004158 <_malloc_r+0xd0>
 8004116:	2a0b      	cmp	r2, #11
 8004118:	d917      	bls.n	800414a <_malloc_r+0xc2>
 800411a:	1961      	adds	r1, r4, r5
 800411c:	42a3      	cmp	r3, r4
 800411e:	6025      	str	r5, [r4, #0]
 8004120:	bf18      	it	ne
 8004122:	6059      	strne	r1, [r3, #4]
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	bf08      	it	eq
 8004128:	f8c8 1000 	streq.w	r1, [r8]
 800412c:	5162      	str	r2, [r4, r5]
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f82f 	bl	8004194 <__malloc_unlock>
 8004136:	f104 000b 	add.w	r0, r4, #11
 800413a:	1d23      	adds	r3, r4, #4
 800413c:	f020 0007 	bic.w	r0, r0, #7
 8004140:	1ac2      	subs	r2, r0, r3
 8004142:	bf1c      	itt	ne
 8004144:	1a1b      	subne	r3, r3, r0
 8004146:	50a3      	strne	r3, [r4, r2]
 8004148:	e7af      	b.n	80040aa <_malloc_r+0x22>
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	42a3      	cmp	r3, r4
 800414e:	bf0c      	ite	eq
 8004150:	f8c8 2000 	streq.w	r2, [r8]
 8004154:	605a      	strne	r2, [r3, #4]
 8004156:	e7eb      	b.n	8004130 <_malloc_r+0xa8>
 8004158:	4623      	mov	r3, r4
 800415a:	6864      	ldr	r4, [r4, #4]
 800415c:	e7ae      	b.n	80040bc <_malloc_r+0x34>
 800415e:	463c      	mov	r4, r7
 8004160:	687f      	ldr	r7, [r7, #4]
 8004162:	e7b6      	b.n	80040d2 <_malloc_r+0x4a>
 8004164:	461a      	mov	r2, r3
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	42a3      	cmp	r3, r4
 800416a:	d1fb      	bne.n	8004164 <_malloc_r+0xdc>
 800416c:	2300      	movs	r3, #0
 800416e:	6053      	str	r3, [r2, #4]
 8004170:	e7de      	b.n	8004130 <_malloc_r+0xa8>
 8004172:	230c      	movs	r3, #12
 8004174:	4630      	mov	r0, r6
 8004176:	6033      	str	r3, [r6, #0]
 8004178:	f000 f80c 	bl	8004194 <__malloc_unlock>
 800417c:	e794      	b.n	80040a8 <_malloc_r+0x20>
 800417e:	6005      	str	r5, [r0, #0]
 8004180:	e7d6      	b.n	8004130 <_malloc_r+0xa8>
 8004182:	bf00      	nop
 8004184:	20000420 	.word	0x20000420

08004188 <__malloc_lock>:
 8004188:	4801      	ldr	r0, [pc, #4]	@ (8004190 <__malloc_lock+0x8>)
 800418a:	f7ff bf03 	b.w	8003f94 <__retarget_lock_acquire_recursive>
 800418e:	bf00      	nop
 8004190:	20000418 	.word	0x20000418

08004194 <__malloc_unlock>:
 8004194:	4801      	ldr	r0, [pc, #4]	@ (800419c <__malloc_unlock+0x8>)
 8004196:	f7ff befe 	b.w	8003f96 <__retarget_lock_release_recursive>
 800419a:	bf00      	nop
 800419c:	20000418 	.word	0x20000418

080041a0 <__ssputs_r>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	461f      	mov	r7, r3
 80041a6:	688e      	ldr	r6, [r1, #8]
 80041a8:	4682      	mov	sl, r0
 80041aa:	42be      	cmp	r6, r7
 80041ac:	460c      	mov	r4, r1
 80041ae:	4690      	mov	r8, r2
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	d82d      	bhi.n	8004210 <__ssputs_r+0x70>
 80041b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041bc:	d026      	beq.n	800420c <__ssputs_r+0x6c>
 80041be:	6965      	ldr	r5, [r4, #20]
 80041c0:	6909      	ldr	r1, [r1, #16]
 80041c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c6:	eba3 0901 	sub.w	r9, r3, r1
 80041ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ce:	1c7b      	adds	r3, r7, #1
 80041d0:	444b      	add	r3, r9
 80041d2:	106d      	asrs	r5, r5, #1
 80041d4:	429d      	cmp	r5, r3
 80041d6:	bf38      	it	cc
 80041d8:	461d      	movcc	r5, r3
 80041da:	0553      	lsls	r3, r2, #21
 80041dc:	d527      	bpl.n	800422e <__ssputs_r+0x8e>
 80041de:	4629      	mov	r1, r5
 80041e0:	f7ff ff52 	bl	8004088 <_malloc_r>
 80041e4:	4606      	mov	r6, r0
 80041e6:	b360      	cbz	r0, 8004242 <__ssputs_r+0xa2>
 80041e8:	464a      	mov	r2, r9
 80041ea:	6921      	ldr	r1, [r4, #16]
 80041ec:	f7ff fed4 	bl	8003f98 <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	444e      	add	r6, r9
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	463e      	mov	r6, r7
 8004204:	6165      	str	r5, [r4, #20]
 8004206:	eba5 0509 	sub.w	r5, r5, r9
 800420a:	60a5      	str	r5, [r4, #8]
 800420c:	42be      	cmp	r6, r7
 800420e:	d900      	bls.n	8004212 <__ssputs_r+0x72>
 8004210:	463e      	mov	r6, r7
 8004212:	4632      	mov	r2, r6
 8004214:	4641      	mov	r1, r8
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	f000 faaa 	bl	8004770 <memmove>
 800421c:	2000      	movs	r0, #0
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	1b9b      	subs	r3, r3, r6
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	4433      	add	r3, r6
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422e:	462a      	mov	r2, r5
 8004230:	f000 fad6 	bl	80047e0 <_realloc_r>
 8004234:	4606      	mov	r6, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	d1e0      	bne.n	80041fc <__ssputs_r+0x5c>
 800423a:	4650      	mov	r0, sl
 800423c:	6921      	ldr	r1, [r4, #16]
 800423e:	f7ff feb9 	bl	8003fb4 <_free_r>
 8004242:	230c      	movs	r3, #12
 8004244:	f8ca 3000 	str.w	r3, [sl]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	e7e9      	b.n	800422a <__ssputs_r+0x8a>
	...

08004258 <_svfiprintf_r>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	4698      	mov	r8, r3
 800425e:	898b      	ldrh	r3, [r1, #12]
 8004260:	4607      	mov	r7, r0
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	460d      	mov	r5, r1
 8004266:	4614      	mov	r4, r2
 8004268:	b09d      	sub	sp, #116	@ 0x74
 800426a:	d510      	bpl.n	800428e <_svfiprintf_r+0x36>
 800426c:	690b      	ldr	r3, [r1, #16]
 800426e:	b973      	cbnz	r3, 800428e <_svfiprintf_r+0x36>
 8004270:	2140      	movs	r1, #64	@ 0x40
 8004272:	f7ff ff09 	bl	8004088 <_malloc_r>
 8004276:	6028      	str	r0, [r5, #0]
 8004278:	6128      	str	r0, [r5, #16]
 800427a:	b930      	cbnz	r0, 800428a <_svfiprintf_r+0x32>
 800427c:	230c      	movs	r3, #12
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	b01d      	add	sp, #116	@ 0x74
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	@ 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004298:	2330      	movs	r3, #48	@ 0x30
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800443c <_svfiprintf_r+0x1e4>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x60>
 80042b4:	2a25      	cmp	r2, #37	@ 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x54>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7e>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6b 	bl	80041a0 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80a7 	beq.w	800441e <_svfiprintf_r+0x1c6>
 80042d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 809f 	beq.w	800441e <_svfiprintf_r+0x1c6>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	484e      	ldr	r0, [pc, #312]	@ (800443c <_svfiprintf_r+0x1e4>)
 8004302:	f000 fa5f 	bl	80047c4 <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xea>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	@ 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	@ 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xfa>
 8004326:	4654      	mov	r4, sl
 8004328:	2000      	movs	r0, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	@ 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94b      	bls.n	80043d4 <_svfiprintf_r+0x17c>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x114>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x114>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	46a2      	mov	sl, r4
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0xa0>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004370:	d10a      	bne.n	8004388 <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	@ 0x2a
 8004376:	d132      	bne.n	80043de <_svfiprintf_r+0x186>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	3402      	adds	r4, #2
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9203      	str	r2, [sp, #12]
 8004382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004386:	9305      	str	r3, [sp, #20]
 8004388:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004440 <_svfiprintf_r+0x1e8>
 800438c:	2203      	movs	r2, #3
 800438e:	4650      	mov	r0, sl
 8004390:	7821      	ldrb	r1, [r4, #0]
 8004392:	f000 fa17 	bl	80047c4 <memchr>
 8004396:	b138      	cbz	r0, 80043a8 <_svfiprintf_r+0x150>
 8004398:	2240      	movs	r2, #64	@ 0x40
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	eba0 000a 	sub.w	r0, r0, sl
 80043a0:	4082      	lsls	r2, r0
 80043a2:	4313      	orrs	r3, r2
 80043a4:	3401      	adds	r4, #1
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	2206      	movs	r2, #6
 80043ae:	4825      	ldr	r0, [pc, #148]	@ (8004444 <_svfiprintf_r+0x1ec>)
 80043b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043b4:	f000 fa06 	bl	80047c4 <memchr>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d036      	beq.n	800442a <_svfiprintf_r+0x1d2>
 80043bc:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <_svfiprintf_r+0x1f0>)
 80043be:	bb1b      	cbnz	r3, 8004408 <_svfiprintf_r+0x1b0>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	3307      	adds	r3, #7
 80043c4:	f023 0307 	bic.w	r3, r3, #7
 80043c8:	3308      	adds	r3, #8
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ce:	4433      	add	r3, r6
 80043d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d2:	e76a      	b.n	80042aa <_svfiprintf_r+0x52>
 80043d4:	460c      	mov	r4, r1
 80043d6:	2001      	movs	r0, #1
 80043d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043dc:	e7a8      	b.n	8004330 <_svfiprintf_r+0xd8>
 80043de:	2300      	movs	r3, #0
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4619      	mov	r1, r3
 80043e6:	3401      	adds	r4, #1
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	4620      	mov	r0, r4
 80043ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f0:	3a30      	subs	r2, #48	@ 0x30
 80043f2:	2a09      	cmp	r2, #9
 80043f4:	d903      	bls.n	80043fe <_svfiprintf_r+0x1a6>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c6      	beq.n	8004388 <_svfiprintf_r+0x130>
 80043fa:	9105      	str	r1, [sp, #20]
 80043fc:	e7c4      	b.n	8004388 <_svfiprintf_r+0x130>
 80043fe:	4604      	mov	r4, r0
 8004400:	2301      	movs	r3, #1
 8004402:	fb0c 2101 	mla	r1, ip, r1, r2
 8004406:	e7f0      	b.n	80043ea <_svfiprintf_r+0x192>
 8004408:	ab03      	add	r3, sp, #12
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	462a      	mov	r2, r5
 800440e:	4638      	mov	r0, r7
 8004410:	4b0e      	ldr	r3, [pc, #56]	@ (800444c <_svfiprintf_r+0x1f4>)
 8004412:	a904      	add	r1, sp, #16
 8004414:	f3af 8000 	nop.w
 8004418:	1c42      	adds	r2, r0, #1
 800441a:	4606      	mov	r6, r0
 800441c:	d1d6      	bne.n	80043cc <_svfiprintf_r+0x174>
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	065b      	lsls	r3, r3, #25
 8004422:	f53f af2d 	bmi.w	8004280 <_svfiprintf_r+0x28>
 8004426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004428:	e72c      	b.n	8004284 <_svfiprintf_r+0x2c>
 800442a:	ab03      	add	r3, sp, #12
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	462a      	mov	r2, r5
 8004430:	4638      	mov	r0, r7
 8004432:	4b06      	ldr	r3, [pc, #24]	@ (800444c <_svfiprintf_r+0x1f4>)
 8004434:	a904      	add	r1, sp, #16
 8004436:	f000 f87d 	bl	8004534 <_printf_i>
 800443a:	e7ed      	b.n	8004418 <_svfiprintf_r+0x1c0>
 800443c:	080048ba 	.word	0x080048ba
 8004440:	080048c0 	.word	0x080048c0
 8004444:	080048c4 	.word	0x080048c4
 8004448:	00000000 	.word	0x00000000
 800444c:	080041a1 	.word	0x080041a1

08004450 <_printf_common>:
 8004450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	4616      	mov	r6, r2
 8004456:	4698      	mov	r8, r3
 8004458:	688a      	ldr	r2, [r1, #8]
 800445a:	690b      	ldr	r3, [r1, #16]
 800445c:	4607      	mov	r7, r0
 800445e:	4293      	cmp	r3, r2
 8004460:	bfb8      	it	lt
 8004462:	4613      	movlt	r3, r2
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800446a:	460c      	mov	r4, r1
 800446c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004470:	b10a      	cbz	r2, 8004476 <_printf_common+0x26>
 8004472:	3301      	adds	r3, #1
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	0699      	lsls	r1, r3, #26
 800447a:	bf42      	ittt	mi
 800447c:	6833      	ldrmi	r3, [r6, #0]
 800447e:	3302      	addmi	r3, #2
 8004480:	6033      	strmi	r3, [r6, #0]
 8004482:	6825      	ldr	r5, [r4, #0]
 8004484:	f015 0506 	ands.w	r5, r5, #6
 8004488:	d106      	bne.n	8004498 <_printf_common+0x48>
 800448a:	f104 0a19 	add.w	sl, r4, #25
 800448e:	68e3      	ldr	r3, [r4, #12]
 8004490:	6832      	ldr	r2, [r6, #0]
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	42ab      	cmp	r3, r5
 8004496:	dc2b      	bgt.n	80044f0 <_printf_common+0xa0>
 8004498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	3b00      	subs	r3, #0
 80044a0:	bf18      	it	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	0692      	lsls	r2, r2, #26
 80044a6:	d430      	bmi.n	800450a <_printf_common+0xba>
 80044a8:	4641      	mov	r1, r8
 80044aa:	4638      	mov	r0, r7
 80044ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044b0:	47c8      	blx	r9
 80044b2:	3001      	adds	r0, #1
 80044b4:	d023      	beq.n	80044fe <_printf_common+0xae>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	f003 0306 	and.w	r3, r3, #6
 80044be:	2b04      	cmp	r3, #4
 80044c0:	bf14      	ite	ne
 80044c2:	2500      	movne	r5, #0
 80044c4:	6833      	ldreq	r3, [r6, #0]
 80044c6:	f04f 0600 	mov.w	r6, #0
 80044ca:	bf08      	it	eq
 80044cc:	68e5      	ldreq	r5, [r4, #12]
 80044ce:	f104 041a 	add.w	r4, r4, #26
 80044d2:	bf08      	it	eq
 80044d4:	1aed      	subeq	r5, r5, r3
 80044d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80044da:	bf08      	it	eq
 80044dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfc4      	itt	gt
 80044e4:	1a9b      	subgt	r3, r3, r2
 80044e6:	18ed      	addgt	r5, r5, r3
 80044e8:	42b5      	cmp	r5, r6
 80044ea:	d11a      	bne.n	8004522 <_printf_common+0xd2>
 80044ec:	2000      	movs	r0, #0
 80044ee:	e008      	b.n	8004502 <_printf_common+0xb2>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4652      	mov	r2, sl
 80044f4:	4641      	mov	r1, r8
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c8      	blx	r9
 80044fa:	3001      	adds	r0, #1
 80044fc:	d103      	bne.n	8004506 <_printf_common+0xb6>
 80044fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	3501      	adds	r5, #1
 8004508:	e7c1      	b.n	800448e <_printf_common+0x3e>
 800450a:	2030      	movs	r0, #48	@ 0x30
 800450c:	18e1      	adds	r1, r4, r3
 800450e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004518:	4422      	add	r2, r4
 800451a:	3302      	adds	r3, #2
 800451c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004520:	e7c2      	b.n	80044a8 <_printf_common+0x58>
 8004522:	2301      	movs	r3, #1
 8004524:	4622      	mov	r2, r4
 8004526:	4641      	mov	r1, r8
 8004528:	4638      	mov	r0, r7
 800452a:	47c8      	blx	r9
 800452c:	3001      	adds	r0, #1
 800452e:	d0e6      	beq.n	80044fe <_printf_common+0xae>
 8004530:	3601      	adds	r6, #1
 8004532:	e7d9      	b.n	80044e8 <_printf_common+0x98>

08004534 <_printf_i>:
 8004534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	7e0f      	ldrb	r7, [r1, #24]
 800453a:	4691      	mov	r9, r2
 800453c:	2f78      	cmp	r7, #120	@ 0x78
 800453e:	4680      	mov	r8, r0
 8004540:	460c      	mov	r4, r1
 8004542:	469a      	mov	sl, r3
 8004544:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800454a:	d807      	bhi.n	800455c <_printf_i+0x28>
 800454c:	2f62      	cmp	r7, #98	@ 0x62
 800454e:	d80a      	bhi.n	8004566 <_printf_i+0x32>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f000 80d1 	beq.w	80046f8 <_printf_i+0x1c4>
 8004556:	2f58      	cmp	r7, #88	@ 0x58
 8004558:	f000 80b8 	beq.w	80046cc <_printf_i+0x198>
 800455c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004564:	e03a      	b.n	80045dc <_printf_i+0xa8>
 8004566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800456a:	2b15      	cmp	r3, #21
 800456c:	d8f6      	bhi.n	800455c <_printf_i+0x28>
 800456e:	a101      	add	r1, pc, #4	@ (adr r1, 8004574 <_printf_i+0x40>)
 8004570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045e1 	.word	0x080045e1
 800457c:	0800455d 	.word	0x0800455d
 8004580:	0800455d 	.word	0x0800455d
 8004584:	0800455d 	.word	0x0800455d
 8004588:	0800455d 	.word	0x0800455d
 800458c:	080045e1 	.word	0x080045e1
 8004590:	0800455d 	.word	0x0800455d
 8004594:	0800455d 	.word	0x0800455d
 8004598:	0800455d 	.word	0x0800455d
 800459c:	0800455d 	.word	0x0800455d
 80045a0:	080046df 	.word	0x080046df
 80045a4:	0800460b 	.word	0x0800460b
 80045a8:	08004699 	.word	0x08004699
 80045ac:	0800455d 	.word	0x0800455d
 80045b0:	0800455d 	.word	0x0800455d
 80045b4:	08004701 	.word	0x08004701
 80045b8:	0800455d 	.word	0x0800455d
 80045bc:	0800460b 	.word	0x0800460b
 80045c0:	0800455d 	.word	0x0800455d
 80045c4:	0800455d 	.word	0x0800455d
 80045c8:	080046a1 	.word	0x080046a1
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6032      	str	r2, [r6, #0]
 80045d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e09c      	b.n	800471a <_printf_i+0x1e6>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	6031      	str	r1, [r6, #0]
 80045e8:	0606      	lsls	r6, r0, #24
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0xbc>
 80045ec:	681d      	ldr	r5, [r3, #0]
 80045ee:	e003      	b.n	80045f8 <_printf_i+0xc4>
 80045f0:	0645      	lsls	r5, r0, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0xb8>
 80045f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	da03      	bge.n	8004604 <_printf_i+0xd0>
 80045fc:	232d      	movs	r3, #45	@ 0x2d
 80045fe:	426d      	negs	r5, r5
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004604:	230a      	movs	r3, #10
 8004606:	4858      	ldr	r0, [pc, #352]	@ (8004768 <_printf_i+0x234>)
 8004608:	e011      	b.n	800462e <_printf_i+0xfa>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	6833      	ldr	r3, [r6, #0]
 800460e:	0608      	lsls	r0, r1, #24
 8004610:	f853 5b04 	ldr.w	r5, [r3], #4
 8004614:	d402      	bmi.n	800461c <_printf_i+0xe8>
 8004616:	0649      	lsls	r1, r1, #25
 8004618:	bf48      	it	mi
 800461a:	b2ad      	uxthmi	r5, r5
 800461c:	2f6f      	cmp	r7, #111	@ 0x6f
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	bf14      	ite	ne
 8004622:	230a      	movne	r3, #10
 8004624:	2308      	moveq	r3, #8
 8004626:	4850      	ldr	r0, [pc, #320]	@ (8004768 <_printf_i+0x234>)
 8004628:	2100      	movs	r1, #0
 800462a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800462e:	6866      	ldr	r6, [r4, #4]
 8004630:	2e00      	cmp	r6, #0
 8004632:	60a6      	str	r6, [r4, #8]
 8004634:	db05      	blt.n	8004642 <_printf_i+0x10e>
 8004636:	6821      	ldr	r1, [r4, #0]
 8004638:	432e      	orrs	r6, r5
 800463a:	f021 0104 	bic.w	r1, r1, #4
 800463e:	6021      	str	r1, [r4, #0]
 8004640:	d04b      	beq.n	80046da <_printf_i+0x1a6>
 8004642:	4616      	mov	r6, r2
 8004644:	fbb5 f1f3 	udiv	r1, r5, r3
 8004648:	fb03 5711 	mls	r7, r3, r1, r5
 800464c:	5dc7      	ldrb	r7, [r0, r7]
 800464e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004652:	462f      	mov	r7, r5
 8004654:	42bb      	cmp	r3, r7
 8004656:	460d      	mov	r5, r1
 8004658:	d9f4      	bls.n	8004644 <_printf_i+0x110>
 800465a:	2b08      	cmp	r3, #8
 800465c:	d10b      	bne.n	8004676 <_printf_i+0x142>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	07df      	lsls	r7, r3, #31
 8004662:	d508      	bpl.n	8004676 <_printf_i+0x142>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	6861      	ldr	r1, [r4, #4]
 8004668:	4299      	cmp	r1, r3
 800466a:	bfde      	ittt	le
 800466c:	2330      	movle	r3, #48	@ 0x30
 800466e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004672:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004676:	1b92      	subs	r2, r2, r6
 8004678:	6122      	str	r2, [r4, #16]
 800467a:	464b      	mov	r3, r9
 800467c:	4621      	mov	r1, r4
 800467e:	4640      	mov	r0, r8
 8004680:	f8cd a000 	str.w	sl, [sp]
 8004684:	aa03      	add	r2, sp, #12
 8004686:	f7ff fee3 	bl	8004450 <_printf_common>
 800468a:	3001      	adds	r0, #1
 800468c:	d14a      	bne.n	8004724 <_printf_i+0x1f0>
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	b004      	add	sp, #16
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	f043 0320 	orr.w	r3, r3, #32
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	2778      	movs	r7, #120	@ 0x78
 80046a2:	4832      	ldr	r0, [pc, #200]	@ (800476c <_printf_i+0x238>)
 80046a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	6831      	ldr	r1, [r6, #0]
 80046ac:	061f      	lsls	r7, r3, #24
 80046ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80046b2:	d402      	bmi.n	80046ba <_printf_i+0x186>
 80046b4:	065f      	lsls	r7, r3, #25
 80046b6:	bf48      	it	mi
 80046b8:	b2ad      	uxthmi	r5, r5
 80046ba:	6031      	str	r1, [r6, #0]
 80046bc:	07d9      	lsls	r1, r3, #31
 80046be:	bf44      	itt	mi
 80046c0:	f043 0320 	orrmi.w	r3, r3, #32
 80046c4:	6023      	strmi	r3, [r4, #0]
 80046c6:	b11d      	cbz	r5, 80046d0 <_printf_i+0x19c>
 80046c8:	2310      	movs	r3, #16
 80046ca:	e7ad      	b.n	8004628 <_printf_i+0xf4>
 80046cc:	4826      	ldr	r0, [pc, #152]	@ (8004768 <_printf_i+0x234>)
 80046ce:	e7e9      	b.n	80046a4 <_printf_i+0x170>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	e7f6      	b.n	80046c8 <_printf_i+0x194>
 80046da:	4616      	mov	r6, r2
 80046dc:	e7bd      	b.n	800465a <_printf_i+0x126>
 80046de:	6833      	ldr	r3, [r6, #0]
 80046e0:	6825      	ldr	r5, [r4, #0]
 80046e2:	1d18      	adds	r0, r3, #4
 80046e4:	6961      	ldr	r1, [r4, #20]
 80046e6:	6030      	str	r0, [r6, #0]
 80046e8:	062e      	lsls	r6, r5, #24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	d501      	bpl.n	80046f2 <_printf_i+0x1be>
 80046ee:	6019      	str	r1, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <_printf_i+0x1c4>
 80046f2:	0668      	lsls	r0, r5, #25
 80046f4:	d5fb      	bpl.n	80046ee <_printf_i+0x1ba>
 80046f6:	8019      	strh	r1, [r3, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	4616      	mov	r6, r2
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	e7bc      	b.n	800467a <_printf_i+0x146>
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	2100      	movs	r1, #0
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	6032      	str	r2, [r6, #0]
 8004708:	681e      	ldr	r6, [r3, #0]
 800470a:	6862      	ldr	r2, [r4, #4]
 800470c:	4630      	mov	r0, r6
 800470e:	f000 f859 	bl	80047c4 <memchr>
 8004712:	b108      	cbz	r0, 8004718 <_printf_i+0x1e4>
 8004714:	1b80      	subs	r0, r0, r6
 8004716:	6060      	str	r0, [r4, #4]
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	2300      	movs	r3, #0
 800471e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004722:	e7aa      	b.n	800467a <_printf_i+0x146>
 8004724:	4632      	mov	r2, r6
 8004726:	4649      	mov	r1, r9
 8004728:	4640      	mov	r0, r8
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	47d0      	blx	sl
 800472e:	3001      	adds	r0, #1
 8004730:	d0ad      	beq.n	800468e <_printf_i+0x15a>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	079b      	lsls	r3, r3, #30
 8004736:	d413      	bmi.n	8004760 <_printf_i+0x22c>
 8004738:	68e0      	ldr	r0, [r4, #12]
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	4298      	cmp	r0, r3
 800473e:	bfb8      	it	lt
 8004740:	4618      	movlt	r0, r3
 8004742:	e7a6      	b.n	8004692 <_printf_i+0x15e>
 8004744:	2301      	movs	r3, #1
 8004746:	4632      	mov	r2, r6
 8004748:	4649      	mov	r1, r9
 800474a:	4640      	mov	r0, r8
 800474c:	47d0      	blx	sl
 800474e:	3001      	adds	r0, #1
 8004750:	d09d      	beq.n	800468e <_printf_i+0x15a>
 8004752:	3501      	adds	r5, #1
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	9903      	ldr	r1, [sp, #12]
 8004758:	1a5b      	subs	r3, r3, r1
 800475a:	42ab      	cmp	r3, r5
 800475c:	dcf2      	bgt.n	8004744 <_printf_i+0x210>
 800475e:	e7eb      	b.n	8004738 <_printf_i+0x204>
 8004760:	2500      	movs	r5, #0
 8004762:	f104 0619 	add.w	r6, r4, #25
 8004766:	e7f5      	b.n	8004754 <_printf_i+0x220>
 8004768:	080048cb 	.word	0x080048cb
 800476c:	080048dc 	.word	0x080048dc

08004770 <memmove>:
 8004770:	4288      	cmp	r0, r1
 8004772:	b510      	push	{r4, lr}
 8004774:	eb01 0402 	add.w	r4, r1, r2
 8004778:	d902      	bls.n	8004780 <memmove+0x10>
 800477a:	4284      	cmp	r4, r0
 800477c:	4623      	mov	r3, r4
 800477e:	d807      	bhi.n	8004790 <memmove+0x20>
 8004780:	1e43      	subs	r3, r0, #1
 8004782:	42a1      	cmp	r1, r4
 8004784:	d008      	beq.n	8004798 <memmove+0x28>
 8004786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800478a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800478e:	e7f8      	b.n	8004782 <memmove+0x12>
 8004790:	4601      	mov	r1, r0
 8004792:	4402      	add	r2, r0
 8004794:	428a      	cmp	r2, r1
 8004796:	d100      	bne.n	800479a <memmove+0x2a>
 8004798:	bd10      	pop	{r4, pc}
 800479a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800479e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047a2:	e7f7      	b.n	8004794 <memmove+0x24>

080047a4 <_sbrk_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	2300      	movs	r3, #0
 80047a8:	4d05      	ldr	r5, [pc, #20]	@ (80047c0 <_sbrk_r+0x1c>)
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fe14 	bl	80013dc <_sbrk>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_sbrk_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_sbrk_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000414 	.word	0x20000414

080047c4 <memchr>:
 80047c4:	4603      	mov	r3, r0
 80047c6:	b510      	push	{r4, lr}
 80047c8:	b2c9      	uxtb	r1, r1
 80047ca:	4402      	add	r2, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	d101      	bne.n	80047d6 <memchr+0x12>
 80047d2:	2000      	movs	r0, #0
 80047d4:	e003      	b.n	80047de <memchr+0x1a>
 80047d6:	7804      	ldrb	r4, [r0, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	428c      	cmp	r4, r1
 80047dc:	d1f6      	bne.n	80047cc <memchr+0x8>
 80047de:	bd10      	pop	{r4, pc}

080047e0 <_realloc_r>:
 80047e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	4607      	mov	r7, r0
 80047e6:	4614      	mov	r4, r2
 80047e8:	460d      	mov	r5, r1
 80047ea:	b921      	cbnz	r1, 80047f6 <_realloc_r+0x16>
 80047ec:	4611      	mov	r1, r2
 80047ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047f2:	f7ff bc49 	b.w	8004088 <_malloc_r>
 80047f6:	b92a      	cbnz	r2, 8004804 <_realloc_r+0x24>
 80047f8:	f7ff fbdc 	bl	8003fb4 <_free_r>
 80047fc:	4625      	mov	r5, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004804:	f000 f81a 	bl	800483c <_malloc_usable_size_r>
 8004808:	4284      	cmp	r4, r0
 800480a:	4606      	mov	r6, r0
 800480c:	d802      	bhi.n	8004814 <_realloc_r+0x34>
 800480e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004812:	d8f4      	bhi.n	80047fe <_realloc_r+0x1e>
 8004814:	4621      	mov	r1, r4
 8004816:	4638      	mov	r0, r7
 8004818:	f7ff fc36 	bl	8004088 <_malloc_r>
 800481c:	4680      	mov	r8, r0
 800481e:	b908      	cbnz	r0, 8004824 <_realloc_r+0x44>
 8004820:	4645      	mov	r5, r8
 8004822:	e7ec      	b.n	80047fe <_realloc_r+0x1e>
 8004824:	42b4      	cmp	r4, r6
 8004826:	4622      	mov	r2, r4
 8004828:	4629      	mov	r1, r5
 800482a:	bf28      	it	cs
 800482c:	4632      	movcs	r2, r6
 800482e:	f7ff fbb3 	bl	8003f98 <memcpy>
 8004832:	4629      	mov	r1, r5
 8004834:	4638      	mov	r0, r7
 8004836:	f7ff fbbd 	bl	8003fb4 <_free_r>
 800483a:	e7f1      	b.n	8004820 <_realloc_r+0x40>

0800483c <_malloc_usable_size_r>:
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbc      	itt	lt
 8004846:	580b      	ldrlt	r3, [r1, r0]
 8004848:	18c0      	addlt	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
